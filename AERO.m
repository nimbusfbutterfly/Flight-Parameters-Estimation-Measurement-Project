% Given data
CL = [-1.10414493484302	-0.883315947874415	-0.662486960905811	-0.441657973937207	-0.220828986968604	0	0.220828986968604	0.441657973937207	0.662486960905811	0.883315947874415	1.10414493484302	1.21170652584920	1.28853623371075	1.33463405842769	1.35000000000000	1.33463405842769	1.28853623371075	1.21170652584920	1.10414493484302	0.965851460692216	0.796826103396791	0.730000000000000	0.730000000000000	0.740000000000000	0.760000000000000	0.780000000000000	0.972831540445641	1.21091619655235	1.42218430518409	1.58862675882105	1.69489278019590	1.72936655653370	1.68499212712194	1.55979005609270	1.35703040737636	1.08504994405072	0.756725704861244	0.388640515367069	-3.02492158249372e-06];
CD=[0.0813550435243688	0.0613436742181042	0.0457792758687873	0.0346618484764181	0.0279913920409966	0.0257679065625227	0.0279913920409966	0.0346618484764181	0.0457792758687873	0.0613436742181042	0.0705452253508198	0.0811270091534428	0.0932960605264592	0.107290469605428	0.118019516565971	0.129821468222568	0.142803615044825	0.157083976549307	0.172792374204238	0.190071611624662	0.209078772787128	0.229986650065841	0.252985315072425	0.278283846579668	0.306112231237634	0.339165775094203	0.561664842825890	0.847893121418590	1.19335505107119	1.58862782829305	2.01989609406167	2.46979356322061	2.91849499945190	3.34498481591431	3.72841647598934	4.04947060702661	4.29161974980414	4.44221394754024	4.49331350328450]
CLBETA=[0.00273315190164909	-0.00680028067390678	-0.0164190961285897	-0.0260882584501516	-0.0357725845744313	-0.0454368157631068	-0.0550456891433348	-0.0645640092872919	-0.0739567197095453	-0.0831889741602776	-0.0922262075926827	-0.0965387017675830	-0.0994779349013999	-0.101055015325220	-0.101283471161002	-0.100179235757755	-0.0977606313023011	-0.0940483506151446	-0.0890654371430348	-0.0828372631607971	-0.0753915061960500	-0.0721769929672119	-0.0716824605966475	-0.0715680284690889	-0.0718247374747178	-0.0720471697343258	-0.0761367779685029	-0.0805317068221790	-0.0823773597096791	-0.0811784394392741	-0.0767769348108589	-0.0693734822286305	-0.0595056793767253	-0.0479859475222406	-0.0358064165918617	-0.0240222834136508	-0.0136276888400436	-0.00543906084564649	3.05882073447030e-08]
cm=[0.146681149175663	0.117619086803684	0.0883741535184620	0.0589921826682437	0.0295189087697684	0	-0.0295189087697684	-0.0589921826682437	-0.0883741535184620	-0.117619086803684	-0.146431183983874	-0.160453916164061	-0.170421615607425	-0.176385633035138	-0.178235051816793	-0.176145295187666	-0.170182791654346	-0.160422460252220	-0.146947792845151	-0.129850946412764	-0.109232846970114	-0.0983095622731028	-0.0884786060457925	-0.0796307454412133	-0.0716676708970920	-0.0754664135070912	-0.122278914880603	-0.194012618843902	-0.253668919760856	-0.306974466289298	-0.360280006538578	-0.411965877257355	-0.460461628075459	-0.504293738884495	-0.542130392038978	-0.572821938996161	-0.595435831835118	-0.609284958277656	-0.613948519265042]
cnbeta=[0.0945055283646115	0.0958882732428614	0.0971626169766501	0.0983249099584958	0.0993716313890952	0.100299396131161	0.101104961404247	0.101785233309260	0.102337273171598	0.102758303692017	0.103045714894635	0.103127547319115	0.103057106287996	0.102835492808735	0.102464034245359	0.101944282974941	0.101278014877257	0.100467227658586	0.0995141390106920	0.0984211846061589	0.0971910159312839	0.0963138449097102	0.0956539349843548	0.0950010360520145	0.0943545381182128	0.0936781838176769	0.0901702901792574	0.0860557173597463	0.0811120592884932	0.0753336588599997	0.0687494618486525	0.0614246096214750	0.0534581303371169	0.0449769648814814	0.0361270026640453	0.0270621601883803	0.0179327688827380	0.00887461987852139	-6.75220573667606e-08]
% Generate time values
time =t;

% Plotting measured data
figure;
plot(time,numbers, 'b-', 'LineWidth', 1.5);
xlabel('Time(s)');
ylabel('CL_\beta');
grid on;

% Generate time values
t = 0:dt:(length(cnbeta)-1)*dt;

% Perform least squares fitting
degree =5; % 6th degree polynomial curve

% Construct the Vandermonde matrix
A = ones(length(time), degree + 1);
for i = 1:degree
    A(:, i+1) = time.^i;
end

% Use the least squares method to find the coefficients
coefficients = A \ cnbeta';

% Generate the fitted curve
curve = A * coefficients;

% Plot the original data and the fitted curve
plot(t, cnbeta,'--', t, curve, 'LineWidth', 2);
xlabel('Time');
ylabel('Cn_\beta');
legend('Original Data', 'Fitted Curve');
grid on;


% Plotting measured data
figure;
plot(time_intervals,numbers, 'b-', 'LineWidth', 1.5);
xlabel('Time(s)');
ylabel('velocity (Mach)');
grid on;

numbers=CLBETA

% Adding noise to the measured values
noise_stddev =0.003; % Standard deviation of the noise
noisy_numbers =  numbers+ noise_stddev * randn(size(numbers));

% Applying Kalman filter
% Assuming initial state and measurement noise covariance
initial_state = noisy_numbers(1);
measurement_noise_covariance = noise_stddev^2;

% Kalman filter initialization
x = initial_state; % Initial state estimate
P = measurement_noise_covariance; % Initial error covariance

filtered_values = zeros(size(noisy_numbers));
filtered_values(1) = x;

for i = 2:numel(noisy_numbers)
    % Prediction step
    x = x;
    P = P + measurement_noise_covariance;
    
    % Update step
    K = P / (P + measurement_noise_covariance);
    x = x + K * (noisy_numbers(i) - x);
    P = (1 - K) * P;
    
    filtered_values(i) = x;
end

% Plotting filtered data
hold on;
plot(time, filtered_values, 'r-', 'LineWidth', 1.5);
grid on
